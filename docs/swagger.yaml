basePath: /
definitions:
  domain.AddComment:
    properties:
      message:
        example: A comment
        type: string
      photo_id:
        example: photo-123
        type: string
    type: object
  domain.AddPhoto:
    properties:
      caption:
        example: A caption
        type: string
      photo_url:
        example: https://www.example.com/image.jpg
        type: string
      title:
        example: A Photo Title
        type: string
    type: object
  domain.AddedComment:
    properties:
      created_at:
        example: the created at generated here
        type: string
      id:
        example: here is the generated comment id
        type: string
      message:
        example: A comment
        type: string
      photo_id:
        example: here is the generated photo id
        type: string
      user_id:
        example: here is the generated user id
        type: string
    type: object
  domain.AddedPhoto:
    properties:
      caption:
        example: A caption
        type: string
      created_at:
        example: create time should be here
        type: string
      id:
        type: string
      photo_url:
        example: https://www.example.com/image.jpg
        type: string
      title:
        example: A Photo Title
        type: string
      user_id:
        type: string
    type: object
  domain.Comment:
    properties:
      createdAt:
        type: string
      id:
        type: string
      message:
        type: string
      photo:
        $ref: '#/definitions/domain.Photo'
      photoID:
        type: string
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/domain.User'
      userID:
        type: string
    type: object
  domain.GetComment:
    properties:
      created_at:
        type: string
      id:
        type: string
      message:
        type: string
      photo:
        $ref: '#/definitions/domain.Photo'
      photo_id:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/domain.User'
      user_id:
        type: string
    type: object
  domain.GetPhoto:
    properties:
      caption:
        type: string
      created_at:
        type: string
      id:
        type: string
      photo_url:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  domain.GetUser:
    properties:
      email:
        example: newjohndoe@example.com
        type: string
      id:
        type: string
      username:
        example: newjohndoe
        type: string
    type: object
  domain.LoggedInUser:
    properties:
      data:
        $ref: '#/definitions/domain.Token'
      message:
        example: message you if the process has been successful
        type: string
      status:
        example: success
        type: string
    type: object
  domain.LoginUser:
    properties:
      email:
        example: johndoe@example.com
        type: string
      password:
        example: secret
        type: string
    type: object
  domain.Photo:
    properties:
      caption:
        type: string
      comment:
        $ref: '#/definitions/domain.Comment'
      createdAt:
        type: string
      id:
        type: string
      photoUrl:
        type: string
      title:
        type: string
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/domain.User'
      userID:
        type: string
    type: object
  domain.RegisterUser:
    properties:
      age:
        example: 8
        type: integer
      email:
        example: johndoe@example.com
        type: string
      password:
        example: secret
        type: string
      username:
        example: johndoe
        type: string
    type: object
  domain.RegisteredUser:
    properties:
      data:
        $ref: '#/definitions/domain.GetUser'
      message:
        example: message you if the process has been successful
        type: string
      status:
        example: success
        type: string
    type: object
  domain.ResponseAddedComment:
    properties:
      data:
        $ref: '#/definitions/domain.AddedComment'
      status:
        example: success
        type: string
    type: object
  domain.ResponseAddedPhoto:
    properties:
      data:
        $ref: '#/definitions/domain.AddedPhoto'
      status:
        example: success
        type: string
    type: object
  domain.ResponseDeletedPhoto:
    properties:
      message:
        example: your account has been successfully deleted
        type: string
      status:
        example: success
        type: string
    type: object
  domain.ResponseGetAllPhotos:
    properties:
      data:
        items:
          $ref: '#/definitions/domain.GetPhoto'
        type: array
      status:
        example: success
        type: string
    type: object
  domain.ResponseGetByIdPhoto:
    properties:
      data:
        $ref: '#/definitions/domain.GetPhoto'
      status:
        example: success
        type: string
    type: object
  domain.ResponseGetComment:
    properties:
      data:
        items:
          $ref: '#/definitions/domain.GetComment'
        type: array
      status:
        example: success
        type: string
    type: object
  domain.ResponseMessageDeletedComment:
    properties:
      message:
        example: your comment has been successfully deleted
        type: string
      status:
        example: success
        type: string
    type: object
  domain.ResponseMessageDeletedUser:
    properties:
      message:
        example: your account has been successfully deleted
        type: string
      status:
        example: success
        type: string
    type: object
  domain.ResponseUpdatedComment:
    properties:
      data:
        $ref: '#/definitions/domain.UpdatedComment'
      status:
        example: success
        type: string
    type: object
  domain.ResponseUpdatedPhoto:
    properties:
      data:
        $ref: '#/definitions/domain.UpdatedPhoto'
      status:
        example: success
        type: string
    type: object
  domain.ResponseUpdatedUser:
    properties:
      data:
        $ref: '#/definitions/domain.UpdatedUser'
      status:
        example: success
        type: string
    type: object
  domain.Token:
    properties:
      token:
        example: the token generated here
        type: string
    type: object
  domain.UpdateComment:
    properties:
      message:
        example: A new comment
        type: string
    type: object
  domain.UpdatePhoto:
    properties:
      caption:
        example: A new caption
        type: string
      photo_url:
        example: https://www.example.com/new-image.jpg
        type: string
      title:
        example: A new title
        type: string
      userID:
        type: string
    type: object
  domain.UpdateUser:
    properties:
      age:
        example: 8
        type: integer
      email:
        example: newjohndoe@example.com
        type: string
      username:
        example: newjohndoe
        type: string
    type: object
  domain.UpdatedComment:
    properties:
      id:
        type: string
      message:
        example: A comment
        type: string
      photo_id:
        example: here is the generated photo id
        type: string
      updated_at:
        type: string
      user_id:
        example: here is the generated user id
        type: string
    type: object
  domain.UpdatedPhoto:
    properties:
      caption:
        type: string
      id:
        type: string
      photo_url:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  domain.UpdatedUser:
    properties:
      age:
        example: 8
        type: integer
      email:
        example: newjohndoe@example.com
        type: string
      id:
        example: here is the generated user id
        type: string
      updated_at:
        example: update time should be here
        type: string
      username:
        example: newjohndoe
        type: string
    type: object
  domain.User:
    properties:
      age:
        type: integer
      createdAt:
        type: string
      email:
        type: string
      id:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  helpers.ResponseMessage:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  model.AddSocialMedia:
    properties:
      name:
        example: Example
        type: string
      social_media_url:
        example: https://www.example.com/johndoe
        type: string
    type: object
  model.AddedSocialMedia:
    properties:
      created_at:
        example: the created at generated here
        type: string
      id:
        example: the social media id generated here
        type: string
      name:
        example: Example
        type: string
      social_media_url:
        example: https://www.example.com/johndoe
        type: string
      user_id:
        example: here is the generated user id
        type: string
    type: object
  model.ResponseDataAddedSocialMedia:
    properties:
      data:
        $ref: '#/definitions/model.AddedSocialMedia'
      status:
        example: success
        type: string
    type: object
  model.ResponseDataFetchedSocialMedia:
    properties:
      data:
        $ref: '#/definitions/model.SocialMedias'
      status:
        example: success
        type: string
    type: object
  model.ResponseDataUpdatedSocialMedia:
    properties:
      data:
        $ref: '#/definitions/model.UpdatedSocialMedia'
      status:
        example: success
        type: string
    type: object
  model.ResponseMessageDeletedSocialMedia:
    properties:
      message:
        example: your social media has been successfully deleted
        type: string
      status:
        example: success
        type: string
    type: object
  model.SocialMedia:
    properties:
      created_at:
        example: here is the generated created at
        type: string
      id:
        example: here is the generated social media id
        type: string
      name:
        example: Example
        type: string
      social_media_url:
        example: https://www.example.com/johndoe
        type: string
      updated_at:
        example: here is the generated updated at
        type: string
      user:
        $ref: '#/definitions/model.User'
      user_id:
        example: here is the generated user id
        type: string
    type: object
  model.SocialMedias:
    properties:
      social_medias:
        items:
          $ref: '#/definitions/model.SocialMedia'
        type: array
    type: object
  model.UpdateSocialMedia:
    properties:
      name:
        example: New Example
        type: string
      social_media_url:
        example: https://www.newexample.com/johndoe
        type: string
    type: object
  model.UpdatedSocialMedia:
    properties:
      id:
        example: here is the generated social media id
        type: string
      name:
        example: New Example
        type: string
      social_media_url:
        example: https://www.newexample.com/johndoe
        type: string
      updated_at:
        example: the updated at generated here
        type: string
      user_id:
        example: here is the generated user id
        type: string
    type: object
  model.User:
    properties:
      email:
        example: johndoe@example.com
        type: string
      id:
        example: here is the generated user id
        type: string
      username:
        example: johndoe
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: gusrylmubarok@gmail.com
    name: gusrylmubarok
  description: mygram is a free photo sharing app written in Go. People can share,
    view, and comment photos by everyone. Anyone can create an account by registering
    an email address and creating a username.
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  title: mygram backend
  version: 1.0.0
paths:
  /comment:
    post:
      consumes:
      - application/json
      description: create and store a comment with authentication user
      parameters:
      - description: Add Comment
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/domain.AddComment'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.ResponseAddedComment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
      security:
      - Bearer: []
      summary: Add a comment
      tags:
      - comment
  /comment/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a comment by id with authentication user
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.ResponseMessageDeletedComment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
      security:
      - Bearer: []
      summary: Delete a comment
      tags:
      - comment
    put:
      consumes:
      - application/json
      description: Update a comment by id with authentication user
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      - description: Update Comment
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/domain.UpdateComment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.ResponseUpdatedComment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
      security:
      - Bearer: []
      summary: Update a comment
      tags:
      - comment
  /comment/{photoId}:
    get:
      consumes:
      - application/json
      description: Get all comments by photo with authentication user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.ResponseGetComment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
      security:
      - Bearer: []
      summary: Get all by photo comments
      tags:
      - comment
  /photo:
    get:
      consumes:
      - application/json
      description: Get all photos
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.ResponseGetAllPhotos'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
      summary: Get all photos
      tags:
      - photo
    post:
      consumes:
      - application/json
      description: Create and store a photo with authentication user
      parameters:
      - description: Add Photo
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/domain.AddPhoto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.ResponseAddedPhoto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
      security:
      - Bearer: []
      summary: Store a photo
      tags:
      - photo
  /photo/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a photo by id with authentication user
      parameters:
      - description: Photo ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.ResponseDeletedPhoto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
      security:
      - Bearer: []
      summary: Delete a photo
      tags:
      - photo
    get:
      consumes:
      - application/json
      description: Get one photo with authentication user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.ResponseGetByIdPhoto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
      security:
      - Bearer: []
      summary: Get one photo
      tags:
      - photo
    put:
      consumes:
      - application/json
      description: Update a photo by id with authentication user
      parameters:
      - description: Photo ID
        in: path
        name: id
        required: true
        type: string
      - description: Photo
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/domain.UpdatePhoto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.ResponseUpdatedPhoto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
      security:
      - Bearer: []
      summary: Update a photo
      tags:
      - photo
  /socialmedias:
    get:
      consumes:
      - application/json
      description: Get all social media with authentication user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseDataFetchedSocialMedia'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
      security:
      - Bearer: []
      summary: Fetch all social media
      tags:
      - socialmedias
    post:
      consumes:
      - application/json
      description: Create and store a social media with authentication user
      parameters:
      - description: Add Social Media
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/model.AddSocialMedia'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.ResponseDataAddedSocialMedia'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
      security:
      - Bearer: []
      summary: Add a social media
      tags:
      - socialmedias
  /socialmedias/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a social media by id with authentication user
      parameters:
      - description: SocialMedia ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessageDeletedSocialMedia'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
      security:
      - Bearer: []
      summary: Delete a social media
      tags:
      - socialmedias
    put:
      consumes:
      - application/json
      description: Update a social media by id with authentication user
      parameters:
      - description: SocialMedia ID
        in: path
        name: id
        required: true
        type: string
      - description: Update Social Media
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/model.UpdateSocialMedia'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseDataUpdatedSocialMedia'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
      security:
      - Bearer: []
      summary: Update a social media
      tags:
      - socialmedias
  /user:
    delete:
      consumes:
      - application/json
      description: Delete a user with authentication user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.ResponseMessageDeletedUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
      security:
      - Bearer: []
      summary: Delete a user
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update a user with authentication user
      parameters:
      - description: Update User
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/domain.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.ResponseUpdatedUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
      security:
      - Bearer: []
      summary: Update a user
      tags:
      - user
  /user/login:
    post:
      consumes:
      - application/json
      description: Authentication a user and retrieve a token
      parameters:
      - description: Login User
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/domain.LoginUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.LoggedInUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
      summary: Login a user
      tags:
      - user
  /user/register:
    post:
      consumes:
      - application/json
      description: create and store a user
      parameters:
      - description: Register User
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/domain.RegisterUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.RegisteredUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/helpers.ResponseMessage'
      summary: Register a user
      tags:
      - user
securityDefinitions:
  Bearer:
    description: Description for what is this security definition being used
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
